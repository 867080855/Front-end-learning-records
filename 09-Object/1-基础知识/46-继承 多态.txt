继承：
    生活中：
        子女的跟父母有很多特征很相似
    编程中：
        1. 拥有父亲的特性，可以访问父类的属性和方法
        2. 拥有自己的特性，可以定义自己的属性和方法
多态：
    生活中：
        同样的购买行为，在购买不同的商品时，其底层的实现方式完全不同
    编程中：
        把相类似的功能定义在基类、父类中
        把不同的功能定义在子类(自身)中
    分类：
        - 对象多态
        - 方法多态
-----------------------------------------------------------
    js的继承不同于其他的高级语言的继承，其他语言中的继承是子类
真正的拥有了父类的方法，而js是通过原型链去访问，不能算是真正意义
上的继承
----------------------------------------------------------------
自定义对象的继承主要在于
    p.prototype = new Base();
    即让p的prototype指向Base的构造函数地址，而base的构造函数地址中的__proto__中记录着
Base的prototype的地址(根据属性搜索机制),...,最终指向Object.prototype
    使p可以访问到Base的原型中的方法甚至是Object的原型中的方法
=============================================================================
多态与重载是紧密相连的，多态的形成通过重载来实现
    --------------------------------------------------
    重载：
        js中当存在两个同名函数时，自动调用后写的方法，之前的方法会作废
            即js不支持重载
        其他语言中当存在两个同名函数时，会根据参数的个数自动决定调用哪个方法
                 当两个同名函数传递的参数个属于相等，当数据类型不同时，也可以自动根据数据类型的不同
             选择不同的方法进行调用。
        -----------------------------------------------------
        那么js如何实现重载？
            js不支持重载，我们只能利用间接的方法实现它。
        两个方法：
            1. 利用arguments
                function attr(id,key,value){
                    var dom = $$.$id(id);
                    var len = arguments.length;
                    if(len === 3){
                        dom.setAttribute(key,value);
                    }else{
                        return dom.getAttribute(key);
                    }
                }
            2. 利用typeof
                var test = function(){
                    function addNum(a,b){
                        return a + b;
                    }
                    function addString(a,b,){
                        return 'str:' + a + b;
                    }

                    this.add = function(a,b){
                        if(typeof(a) == 'number'){
                            return addNum(a,b);
                        }else{
                            return addString(a,b);
                        }
                    }
                }